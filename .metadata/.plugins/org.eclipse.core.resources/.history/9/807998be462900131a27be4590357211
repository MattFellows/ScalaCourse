package week02

object session {

  
  def trFactorial(x: Int): Int = {
  	def tailRecursiveFactorial(prevMultiple: Int, currentValue: Int): Int = {
  		if (currentValue == 1) prevMultiple else tailRecursiveFactorial(prevMultiple * currentValue, currentValue - 1)
  	}
  	
  	tailRecursiveFactorial(1, x)
  }
  
  def factorial(x: Int): Int = if (x == 0) 1 else x * factorial(x-1)
  
  trFactorial(6)
  factorial(6)
  
  
  
  def sum(f: Int => Int, a: Int, b: Int): Int = {
  	if (a > b) 0 else f(a) + sum(f, a+1, b)
  }
  
  def trSum(f: Int => Int, a: Int, b: Int): Int = {
  	def loop(a: Int, acc: Int): Int = {
  		if (a > b) acc
  		else loop(a+1, f(a)+acc)
  	}
  	loop(a, 0)
  }
  
  sum(x => x, 1, 6)
  trSum(x => x, 1, 6)
  
  
  
  def product(f: Int => Int)(a: Int, b: Int): Int = {
  	
  		if (a > b) 1
  		else f(a) * product(f)(a+1, b)
  	
  }
  
  product(x=>x*x)(3, 4)
  
  def newFactorial(n: Int) = product(x=>x)(1, n)
  
  newFactorial(6)
  
  def general(operation: (a: Int, b:) => Int) = ???
  
}